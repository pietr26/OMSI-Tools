#ifndef OCMAIN_H
#define OCMAIN_H

#include "OTGlobal.h"
#include <type_traits>

/* '//-' (hinter einer Variable): Schreibschutz / besondere Achtung bei Ver√§nderung */

template<class T>
class OC2DCoordinates
{
public:
    static_assert(std::is_arithmetic<T>::value, "The type T must be numeric.");

    OC2DCoordinates(T x, T y)
    {
        this->x = x;
        this->y = y;
    }

    T x;
    T y;
};

template<class T>
class OC3DCoordinates
{
public:
    static_assert(std::is_arithmetic<T>::value, "The type T must be numeric.");

    OC3DCoordinates(T x, T y, T z)
    {
        this->x = x;
        this->y = y;
        this->z = z;
    }

    T x;
    T y;
    T z;
};


class OCModel // cfg
{
public:
    // TODO
};

class OCSound // cfg
{
public:
    // TODO
};

class OCPassengerCabin // cfg
{
public:
    // TODO
};

////////////////////////////////////////

class OCDriver // odr
{
public:
    class BusInfo
    {
    public:
        QString friendlyname;
        int distance; // 100m (1 =^ 100m)
    };

    QString name;
    QString genderIdent;
    QDate birthDate;
    QDate hireDate;

    int totalBusstops;
    int tooLateBusstops;
    int tooEarlyBusstops;

    int distance; // km

    int crashes;
    int hitAndRun;
    int extremeCrashes;
    int injuredPeds;

    int tickets;
    float money;

    int passengerComfortTotal;
    int passengerComfortPositive;
    int ticketComfortTotal;
    int ticketComfortPositive;
    float driveComfort; // % decimal

    QList<BusInfo> busInfo;
};

class OCFont // oft
{
public:
    class Character
    {
    public:
        Character(QString ca = "", int lP = -1, int rP = -1, int hP = -1, QString co = "")
        {
            character = ca;
            leftPixel = lP;
            rightPixel = rP;
            highestPixelInFontRow = hP;
            comment = co;
        }

        QString character;
        int leftPixel;
        int rightPixel;
        int highestPixelInFontRow;
        QString comment;
    };

    QString path;
    QString name;
    QString colorTexture;
    QString alphaTexture;
    int maxHeightOfChars = -1;
    int distanceBetweenChars = -1;

    QList<Character> characters;
};

class OCHuman // hum
{
public:
    // TODO
};

class OCGameControler // cfg
{
public:
    // TODO
};

class OCKeyboard // cfg
{
public:
    class Entry
    {
    public:
        QString event;
        int keyIdent = -1;
        // bool ?;
    };


    QList<Entry> entries;
};

class OCTextTranslation // dsc
{
public:
    // TODO: Embed in other classes?
    QString name;
    QString description;
};

class OCLanguage // olf
{
public:
    class Part
    {
    public:
        QString ident;
        QString translation;
    };

    QString ident;
    QList<Part> parts;
};

class OCMap {
public:
    class Global // global.cfg
    {
    public:
        class Texture
        {
        public:
            QString mainTex;
            QString subTex;
            //OBJECT ???; // TODO
            //OBJECT ???; // TODO
            //OBJECT ???; // TODO
        };

        class Season
        {
        public:
            int season;
            int seasonStartDay;
            int seasonEndDay;
        };

        class AiDensity
        {
        public:
            float timeDecimal;
            float density; // can be bigger as 1?
        };

        class Entrypoint
        {
        public:

            // TODO
            /* [entrypoints]
         * entrypointCount      * (
         * objectID
         * ?
         * xpos
         * zpos            Attention! Inverted
         * ypos
         * ?        \
         * ?        |  maybe       | very special dependencies
         * ?        |  irrelevant  | with rot, pitch and bank
         * ?        /
         * tileID  // see oreder in global.cfg
         * name
         * )
        */
        };

        class BackgroundImage
        {
        public:
            bool isVisible;
            QString picturePath;
            float width;
            float height;
            float startWidth;
            float startHeight;

            /* [backgroundimage]
         * isActive (0=false 1=true)
         * picturePath (absolute path)
         * width
         * height
         * startwidth       decimal
         * startheight      decimal
        */
        };

        class Mapcam
        {
        public:
            OC2DCoordinates<int> tilePosition;
            OC3DCoordinates<float> position;
            float rotAroundZ;
            float rotAroundX;
            float distanceFromZeroMapHeight;

            /* [mapcam]
         * tileXPos
         * tileYPos
         * xpos
         * zpos            Attention! Inverted
         * ypos
         * rotAroundZ
         * rotAroundX
         * distanceFromZeroMapHeight
        */
        };

        class TileInformation
        {
        public:
            OC2DCoordinates<int> position;
            QString name; // should be auto-generated by OMSI Editor in most cases
        };

        QString name;
        QString friendlyname;
        QString description;
        int version; //-
        int nextIDCode; //-
        bool worldCoodinates;
        bool dynHelpers;
        bool lht;
        bool realrail;
        BackgroundImage bgImage;
        Mapcam standardView;
        QString moneysystem;
        QString ticketpack;
        int repairTime; // minimal time
        QString standardDepot;
        QList<Texture> groundTextures;
        int startYear;
        int endYear;
        int realYearOffset;
        QList<Season> seasons;
        QList<AiDensity> trafficDensities;
        QList<AiDensity> passengerDensities;
        QList<Entrypoint> entrypoints;
        QList<TileInformation> tiles;
    };

    class Tile
    {
    public:
        class Spline
        {
        public:
            class Rule
            {
            public:
                int pathIdent = -1;
                QString param; // TODO: params are const values, list them!
                int value = -1;
                int aiGroupIndex = -1;
            };

            bool h;

            //?
            QString path;
            //?...

            QList<Rule> rules;

            // Different param count spline / splineH?
        };

        class Sceneryobject
        {
        public:
            // TODO
            // possible for objects: [object] [splineAttachement] [attachObj] [splineAttachement_repeater]

            //?
            QString path;
            //?...

            int parentObjectID = -1; // [varparent]

            // Attention: Different param count object / attachement!

            /* [object]
         * ?
         * path
         * objectID
         * xpos
         * ypos
         * zpos
         * rot
         * pitch
         * bank
         * labelCount
         * labelCount * labels... \./
        */
        };

        int version;
        bool terrain;
        bool variableTerrainLightmap;
        bool variableTerrain;

        QList<Spline> splines;

        QList<Sceneryobject> sceneryobjects;
    };

    class UnschedTrafficDensitiesGroup
    {
    public:
        class day
        {
        public:
            class density
            {
            public:
                float time;
                float density; // can be bigger as 1!
            };

            // 0 = all days - else: +1 = weekday, +2 = saturday, +4 = sunday
            int dayIdent = -1;
            QList<density> densities;

        };

        QString name;
        float density;
        QList<day> days;
    };

    class UnschedVehicleGroup
    {
    public:
        QString name;
        /*
         * 0 = no traffic by default,
         * 1 = use density of first UVG by default,
         * 2 = ...            second ...          ,
         * 3 = ...
         if this is the first UVG, then 1 = use density class Medium by default */
        int defaultDensity = -1;
    };

    class Parklist
    {
    public:
        int ident;
        QList<QString> objectList;
    };

    class Ailist
    {
    public:
        class Ailist1
        {
        public:
            class Group
            {
            public:
                QString name;
                int vehicleCount = 0;
                QList<int> vehicleIdents;
                QString hofFileName;
            };

            int vehicleClass;
            int baseClassForUnschedAI = -1; // -1: All vehicles that weren't mentioned in a group
            int vehicleCount = 0;
            QList<QString> vehiclePaths;
            QList<Group> groups;
        };

        class Ailist2
        {
        public:
            class Group
            {
            public:
                class Vehicle
                {
                public:
                    QString vehiclePath;
                    int density;
                };

                QString name;
                QString hofFileName; //?
                QList<Vehicle> vehicles;
            };

            class Groupdepot
            {
            public:
                class Typgroup2
                {
                public:
                    class Vehicle
                    {
                    public:
                        QString number;
                        QString repaintName;
                        QString regPlate;
                    };

                    QString vehiclePath;
                    QList<Vehicle> vehicles;
                };

                QString name;
                QString hofFileName;

                // TODO: Typgroup (Typgroup1)?
                QList<Typgroup2> typgroup2s;
            };

            QList<Group> groups;
            QList<Groupdepot> groupdepots;
        };

        int usedAilist = -1;
    };

    class Chrono
    {
    public:
        class Tile
        {
        public:
            class selectObject
            {
            public:
                int ident = -1;

                int relabelCount;
                QList<QString> relabels;

                bool isDeleted;
                QString type; // optional new path for an object
            };

            class selectSpline
            {
            public:
                int ident = -1;
                bool isDeleted;
                QString type; // optional new path for an spline

                QList<OCMap::Tile::Spline::Rule> rules;
            };

            int version;

            QList<OCMap::Tile::Spline> splines;
            QList<OCMap::Tile::Sceneryobject> sceneryobjects;
        };

        QString folderName;
        QString name;
        QString description;
        QList<QString> deactivatedLines;
        QDate start;
        QDate end;
        QString ticketpack;
        QString moneysystem;
        QList<Tile> changedTiles;
        Ailist ailist; // ailists_#upd.txt
        Ailist ailistLow; // ailists_#low_#upd.txt -- ??

        // TODO: TTData!
        // TODO: humans, drivers etc.?
    };

    class Signalroute
    {
    public:
            // TODO
    };

    class Holidays
    {
        // TODO: This file exists multiple times with file (pre-)extension [language code].
    public:
        QDate start;
        QDate end;
        QString name;
    };

    class Holiday
    {
        // TODO: This file exists multiple times with file (pre-)extension [language code].
    public:
        QDate date;
        QString name;
    };

    Global global;
    QList<QString> humans; // humans.txt
    QList<QString> drivers; // drivers.txt
    QList<QString> registrations; // regstrations.txt
    QList<Parklist> parklists; // parklist.txt | parklist_n.txt
    QList<Chrono> chronos; // \Chrono\*[DIR]
    QList<UnschedVehicleGroup> unschedVehicleGroups; // unsched_vehgroups.txt
    QList<UnschedTrafficDensitiesGroup> unschedTrafficDensitiesGroups; // unsched_trafficdens.txt
    QList<Signalroute> signalroutes; // signalroutes.cfg
    QList<Holidays> holidaysMultiple; // holidays.txt | holidays_[LGC].txt // TODO: see list class
    QList<Holiday> holidaysSingle; // holidays.txt | holidays_[LGC].txt // TODO: see list class
    Ailist ailist; // ailists.txt
    Ailist ailistLow; // ailists_#low.txt
};

class OCMoney { // *.cfg
public:
    class moneyPart
    {
    public:
        QString modelFilename; // relative to CURRENT folder (without model folder!)
        float value;
    };

    QString name; // TODO: Useless?
    int decimalCount;

    QList<moneyPart> coins;
    QList<moneyPart> bills;
};

class OCOptions // *.oop | options.cfg
{
public:
    QString lastMap; // from mainDir
    QString lastDriver; // from mainDir
    QString ICAOWeather; // curr. ICAO code // TODO: In which file?
    bool driverViewSmooth;
    bool driverViewMoving; // Todo: ?

    bool noTerrainCollision;
    bool noCollision;
    bool noVehicleCollision;
    bool noPedestrianCollision;

    bool noAutoTimetableView;

    bool noAutomaticClutch;
    bool showErrorMessages;
    bool wearLifespan; // general vehicle maintenance status: 0=endless 1=vbad 2=bad 3=normal 4=good
    bool autoSteeringCenter; // automatically center steering in keyboard mode
    bool reducedSteeringSpeed; // reduces steering speed on high speed
    int ticketselling; // mode: 0=none 1=easy 2=advanced
    bool useActTime;
    bool useActDate;
    bool useActYear;
    bool alternativeViews; // alternative view keys [altView]
    bool seeOwnDriver;
    QString radioLink;
    QString font; // system font name, e.g. 'Courier New'
    QString languageIdent;
    bool noVehiclePreview;

    bool disableMultithreadingCalculations;
    bool disableMultithreadingTextureLoad;

    bool loadAllTiles;
    QString Reflexions; // [performance_realreflexions] - none | economy | full

    int realtimeTexRelfexionSize; // [performance_reflTexSize] - in pixels: 0=1; 1=2; 2=4; 3=8; ... [increases 2^n] ...; 12=4096

    bool sunglow;

    bool restrictTexturesTo256px;

    bool noStencilBuffer;
    bool stencilShadows; // 'on'=true; 'off'=false
    bool noRainReflexions;
    bool noHumanRainReflexions;

    int maxNeighbourTiles = 1; // min: 1
    float objectDistance = 20; // min: 20
    float minObjectSize; // %, decimal, 0% - 10%
    float minObjectRelfexionSize; // %, decimal, 0% - 50%
    int objectComplexity = 3; // 0 - 3
    int mapComplexity = 2; // 0 - 2

    float switchToEconomyReflexionsMinimum = -1; // [performance_dyn_redrefl], 1st
    float switchToEconomyReflexionsMaximum = -1; // [performance_dyn_redrefl], 2nd

    float reduceNeighbourTilesMinimum = -1; // [performance_dyn_tile_red], 1st
    float reduceNeighbourTilesMaximum = -1; // [performance_dyn_tile_red], 2nd

    int maxFPS = 30;

    int texFiler1stValue = -1; // [texFilter] // TODO: ?
    int texFiler2ndValue = -1;

    int texture1stValue = -1; // [texture] // TODO: ?
    int texture2ndValue = -1;

    bool useLowTextures;

    float maxTextureMemory = 600;

    bool smokesystemsEnabled; // 0 | 1
    int particlesPerSender = 50;
    bool onlyOwnVehicle; // 0 | 1
    bool noSmokesystemsInRelfexions; // 0 | 1

    bool noTerrainLightmap;
    bool noLightmap;
    bool noNightmap;
    bool noRelfexionmap;
    bool noBumpmap;

    int maxSounds = 350; // 5 - 1000
    float masterVolume = 1; // 0.0 - 1.0
    int stereoEffect = 50; // 0 - 100
    bool dopplerSound; // 'on'=true; 'off'=false
    bool aiHasSound;
    bool sceneryHasSound;
    bool noReverbSound;

    int aiVehicleCount = 100; // 0 - 1000
    int aiHumanCount = 250; // 0 - 1000
    int aiMaxCountRandom3rdValue = -1; // TODO: ?
    int aiMaxCountRandom4thValue = -1; // TODO: ?
    int aiMaxCountRandom5thValue = -1; // TODO: ?
    int aiMaxCountRandom6thValue = -1; // TODO: ?
    int aiMaxCountRandom7thValue = -1; // TODO: ?
    int aiMaxCountRandom8thValue = -1; // TODO: ?
    int aiMaxCountRandom9thValue = -1; // TODO: ?

    int aiVehicleFactor = 100; // % (no decimal! 100 = '100%')
    int parkedVehicleFactor = 100; // % (no decimal! 100 = '100%')

    int schedAiVehicleCount = 30; // 0 - 1000
    int schedAiVehiclePriority = 4; // 1 - 4

    bool useLowAilist;

    QString editorAerialLink;

    int screenRatio = -1;

    bool noTextLogHighSwitch; // e.g. in 'PC 2009.oop' as '[no_tex_low_high_switch]' // TODO: ?
};

class OCPlugin // *.opl
{
public:
    QString dllName;
    QList<QString> varnames;
    QList<QString> stringvarnames;
    QList<QString> systemvarnames;
    QList<QString> triggers;

};

class OCSceneryobject
{
public:
    class Tree
    {
    public:
        QString texture;
        float minHeight;
        float maxHeight;
        float minRatio;
        float maxRatio;
    };

    class Attachment
    {
    public:
        enum Method
        {
            xRotation = 1,
            yRotation = 2,
            zRotation = 3,
            transform = 4,
        };

        Method method;
        float rotation;
        OC3DCoordinates<float> transformation;
    };

    class Maplight
    {
    public:
        OC3DCoordinates<float> position;
        QColor color;
        float maxBrightnessRadius = -1;
    };

    class Triggerbox
    {
    public:
        float xSize;
        float ySize;
        float zSize;
        OC3DCoordinates<float> midpoint;

        float reverbTime = -1; // in s; max: 3
        float transition = -1; // in m, means "softness" when a vehicle goes in / out of the triggerbox
    };

    class TrafficLightGroup
    {
    public:
        class TrafficLight
        {
        public:
            class Phase
            {
            public:
                int currentPhaseIdent = 12; // 12: off
                float duration;
            };

            QString name;
            QList<Phase> phases;
            float approachDistance = -1; // shouldn't be 0!
        };

        class TrafficLightJumpStop
        {
        public:
            int checkOnApproachIdent;
            float jumpTimePosition;
            bool jumpIfNoApproach;
            float jumpToTime = -1; // mandatory for [traffic_light_jump] {if!=-1} or [traffic_light_stop] {if=-1}!
        };

        float duration;
        QList<TrafficLight> trafficLights;
        QList<TrafficLightJumpStop> jumpStops;
    };

    class SplineHelper
    {
    public:
        OC3DCoordinates<float> position; // Attention! Inverted: xzy
        float rotation; // can be bigger as 360
        float splineHelper5thValue; // TODO: ?
        float splineHelper6thValue; // TODO: ?
    };

    class Path
    {
    public:
        class RailEnh
        {
        public:
            int railEnh1stValue;
            int railEnh2ndValue;
            int railEnh3rdValue;
            int railEnh4thValue;
            int railEnh5thValue;
            int railEnh6thValue;
            int railEnh7thValue;
            int railEnh8thValue;
        };

        class ThirdRail
        {
        public:
            int thirdRail1stValue;
            int thirdRail2ndValue;
            int thirdRail3rdValue;
            int thirdRail4thValue;
            int thirdRail5thValue;
            int thirdRail6thValue;
        };

        OC3DCoordinates<float> position; // not inverted
        float rotation;
        float radius;
        float length = -1;
        float gradientStart;
        float gradientEnd;
        int type = -1; // 0=Street 1=Sidewalk 2=Railroad
        float width;
        int direction = -1; // 0=Forward 1=Reverse 2=Both
        int blinker = -1; // 0=no 1=Straight 2=Left 3=Right

        int trafficLightIdent = -1;

        bool hasCrossingProblem = false;

        int blockPath1stValue; // TODO: ? |-> Wird vmtl. daf√ºr genutzt, diesen Pfad freizuhalten bzw., dass dort keine KI zum Stehen kommt
        int blockPath2ndValue; // TODO: ? /   s. Sceneryobjects\ADDON_SimpleStreets\Kreuz_MC\Einm_001_001_1.sco - Pfad 8: sogar 4 blockpaths auf einmal.

        // if (path2) {
        int path2_13thValue; // TODO: ?
        int path2_14ndValue; // TODO: ?
        // }

        RailEnh rail;
        ThirdRail thirdRail;

        int switchdir = -1;
    };

    QString friendlyname;
    QList<QString> groups;

    bool isDepot;
    bool isBusstop;
    bool isCarPark;
    bool isPetrolStation;
    bool isEntrypoint;
    bool isHelpArrow;
    bool isSignal;
    bool isTrafficLight;

    bool usesAbsoluteHeight;
    bool noDistanceCheck;
    bool noLightMapMapping;
    bool lightMapMapping;
    bool noCollision;
    QList<QString> collisionMeshes;
    bool noMapLighting;
    bool isJoinable;
    bool isFixed;
    QString rendertype;
    float momentOfIntertiaX; // Tr√§gheitsmomente um x, y und z-Achse, also Quer-, L√§ngs- und Hochachse um den Schwerpunkt in dieser Reihenfolge in Tonnen * Meter^2:
    float momentOfIntertiaZ; // Attention: Inverted!
    float momentOfIntertiaY;

    int complexity = -1;

    QPair<float, float> crashModePole; // TODO: ?
    QList<Attachment> attachments;

    float mass;
    OC3DCoordinates<float> centerOfGravity;

    QString crossingHeightDeform;
    QString terrainHole;
    bool isTerrainMapping; // TODO: Correct?

    bool onlyVisibleInEditor;
    bool isSurface;

    QList<QString> varnamelists;
    QList<QString> stringvarnamelists;
    QList<QString> scripts;
    QList<QString> constfiles;

    Tree tree;

    QList<Triggerbox> triggerboxes;

    QList<TrafficLightGroup> trafficLightGroups;
    QList<SplineHelper> splineHelpers;
    QList<Path> paths; // TODO: see Template class class

    int switchDirectionCount = -1; // e.g.: single / 'simple' switch: 2  -  [switch]

    OCModel model;                     // \ Vielleicht kriegen wir das
    OCSound sound;                     // | ja auch noch etwas universeller
    OCPassengerCabin passengerCabin;   // / gel√∂st (Wechsel Pfad / Direktdef.).
};

class OCSituation {
public:
    QString name;
    QString description;
    // TODO... - eins nach dem anderen, Piet! ;-)
};

// car_use (Spandau)
// TTData

#endif // OCMAIN_H

/* TODO:
 * set 'unsigned' int, float etc. if useful
 * Varlists in /program?
 * Set standard values for some variables
 * Implement OCViewable - ABSTRACT base class for sco, bus, ovh, hum etc. - NOT sli!
 * Comment ALL classes and members in a universal way (with '///' and @'s etc.)
*/
